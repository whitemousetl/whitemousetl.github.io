<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>WhiteMouseTL</title><link>https://whitemousetl.github.io/</link><description>知人者智，自知者明。胜人者有力，自胜者强。</description><copyright>WhiteMouseTL</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/67313669?v=4</url><title>avatar</title><link>https://whitemousetl.github.io/</link></image><lastBuildDate>Sun, 14 Apr 2024 20:16:48 +0000</lastBuildDate><managingEditor>WhiteMouseTL</managingEditor><ttl>60</ttl><webMaster>WhiteMouseTL</webMaster><item><title>MySQL-事务</title><link>https://whitemousetl.github.io//post/MySQL--shi-wu.html</link><description>**1、事务简介**&#13;
```&#13;
事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/MySQL--shi-wu.html</guid><pubDate>Sun, 14 Apr 2024 20:16:16 +0000</pubDate></item><item><title>MySQL-函数</title><link>https://whitemousetl.github.io//post/MySQL--han-shu.html</link><description>**函数是指一段可以直接被另一段程序调用的程序或代码**&#13;
&#13;
**1、常用的字符串函数**&#13;
```&#13;
concat(S1,S2,...,Sn)字符串拼接，将S1,S2,...,Sn拼接成一个字符串&#13;
lower(str) 将字符串str全部转换成小写&#13;
upper(str) 将字符串str全部转换成大写&#13;
lpad(str,n,pad) 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度&#13;
rpad(str,n,pad) 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度&#13;
trim(str) 去掉字符串头部和尾部的空格&#13;
substring(str,start,len) 返回字符串str从start位置起的len个长度的字符串&#13;
索引值是从1开始的&#13;
演示可用 select 函数(参数);&#13;
```&#13;
&#13;
**2、常见的数值函数**&#13;
```&#13;
ceil(x) 向上取整&#13;
floor(x) 向下取整&#13;
mod(x,y) 返回x/y的模&#13;
rand() 返回0~1内的随机数&#13;
round(x,y) 求参数x的四舍五入值，保留y为小数&#13;
```&#13;
&#13;
**3、常见的日期函数**&#13;
```&#13;
curdate() 返回当前日期&#13;
curtime() 返回当前时间&#13;
now() 返回当前日期和时间&#13;
year(date) 获取指定date的年份&#13;
month(date) 获取指定date月份&#13;
day(date) 获取只当date日期&#13;
date_add（date,interval expr type） 返回一个日期/时间值加上一个时间间隔expr后的时间值&#13;
expr 是数字&#13;
type是类型，可以是year，month，day&#13;
datediff(date1,date2) 返回起始时间date1和结束时间date2之间的天数&#13;
```&#13;
&#13;
**4、流程函数**&#13;
```&#13;
流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选，从而提高语句的效率&#13;
if(value,t,f) 如果value为true，返回t，否则f&#13;
ifnull(value1,vaule2) 如果value1不为空，返回value1，否则返回value2&#13;
case when value1 then res1 ... else default end 如果value1为true，返回res1，... ，否则返回默认值default&#13;
case expr when val1 then res1 else default end 如果expr的值等于val1，返回res1，否则返回default默认值&#13;
-- 需求：查询emp表的员工姓名和工作地址（北京/上海------&gt;一线城市，其他城市-----&gt;二线城市）&#13;
SELECT&#13;
    name,&#13;
    workaddress,&#13;
    (CASE workaddress WHEN '北京' THEN '一线城市' WHEN '上海' THEN '一线城市' ELSE '二线城市' END) '工作地址'&#13;
    FROM emp;&#13;
-- 案例：统计班级各个学员的成绩，展示的规则如下：&#13;
-- &gt;= 85 ，展示优秀&#13;
-- &gt;= 60 ,展示及格&#13;
-- 其他，展示不及格&#13;
&#13;
SELECT&#13;
    id,&#13;
    name,&#13;
    math,&#13;
    (CASE&#13;
         WHEN math &gt;= 85 THEN '优秀'&#13;
         WHEN (math &gt;= 60 AND math &lt; 85) THEN '及格'&#13;
         ELSE '不及格' END) '数学评定',&#13;
    english,&#13;
    (CASE&#13;
         WHEN english &gt;= 85 THEN '优秀'&#13;
         WHEN english &gt;= 60 AND english &lt; 85 THEN '及格'&#13;
         ELSE '不及格' END) '英语评定',&#13;
    chinese,&#13;
    (CASE&#13;
         WHEN chinese &gt;= 85 THEN '优秀'&#13;
         WHEN chinese &gt;= 60 AND chinese &lt; 85 THEN '及格'&#13;
         ELSE '不及格' END) '语文评定'&#13;
    FROM&#13;
        score;&#13;
case expr 要求的是等于，而case when要求的是true或false，注意区别&#13;
```。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/MySQL--han-shu.html</guid><pubDate>Sun, 14 Apr 2024 20:10:38 +0000</pubDate></item><item><title>MySQL-多表查询</title><link>https://whitemousetl.github.io//post/MySQL--duo-biao-cha-xun.html</link><description>**1、多表关系**&#13;
```&#13;
一对多（多对一）&#13;
案例：部门 与 员工 的关系&#13;
关系：一个部门对应多个员工，一个员工对应一个部门&#13;
实现：在多的一方建立外键，指向一的一方的主键&#13;
添加外键语法：&#13;
创建表时&#13;
create table 表名(&#13;
    字段1 字段1类型，&#13;
    ... ,&#13;
    [constraint] [外键名称] foreign key(外键字段名) references 主表(主表列名)&#13;
);&#13;
&#13;
alter table 表名 add constraint 外键名称 foreign (外键字段名) references 主表(主表列名)；&#13;
```&#13;
```&#13;
多对多&#13;
案例：学生 与 课程 的关系&#13;
关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择&#13;
实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键&#13;
```&#13;
&#13;
```&#13;
一对一&#13;
案例：用户 与 用户详情 的关系&#13;
关系：一对一的关系，多用于单表拆分，将一张基础表字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率（空间换时间）&#13;
实现：在任意一方加入外键，关联另外一方的主键，并且设置外键是唯一的（unique）&#13;
```&#13;
&#13;
**2、多表查询概述**&#13;
```&#13;
概述：指从多张表中查询数据&#13;
笛卡尔积：笛卡尔积是指在数学中，两个集合A和B的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）&#13;
```&#13;
```&#13;
多表查询分类：&#13;
- 连接查询&#13;
内连接：相当于重新A、B交集部分数据。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/MySQL--duo-biao-cha-xun.html</guid><pubDate>Sun, 14 Apr 2024 20:04:25 +0000</pubDate></item><item><title>MySQL-存储引擎</title><link>https://whitemousetl.github.io//post/MySQL--cun-chu-yin-qing.html</link><description>1、MySQL体系结构&#13;
![image](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/91dba447-1b5a-4679-aae9-2967b5cf5dc5)&#13;
&#13;
- 连接层：接受客户端的连接等&#13;
- 服务层：SQL接口、解析器等绝大部分核心功能&#13;
- 引擎层：index索引是在存储引擎层实现的&#13;
- 存储层：数据最终是存储在磁盘当中的&#13;
&#13;
&#13;
2、存储引擎简介&#13;
&#13;
- 存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/MySQL--cun-chu-yin-qing.html</guid><pubDate>Sun, 14 Apr 2024 19:55:59 +0000</pubDate></item><item><title>MySQL-数据控制语言DCL </title><link>https://whitemousetl.github.io//post/MySQL--shu-ju-kong-zhi-yu-yan-DCL%20.html</link><description>**DCL （Data Control Language）&#13;
数据控制语言：用来创建数据库用户、控制数据库的访问权限**&#13;
&#13;
1、DCL-管理用户&#13;
- 查询用户&#13;
```&#13;
use mysql；&#13;
select * from user；&#13;
```&#13;
- 创建用户&#13;
`create user '用户名'@'主机名' identified by '密码';`&#13;
- 修改用户密码&#13;
`alter user '用户名'@'主机名' identified with mysql_native_password by '新密码';`&#13;
- 删除用户&#13;
`drop user '用户名'@'主机名';`&#13;
注意：&#13;
主机名可以与通配符%使用。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/MySQL--shu-ju-kong-zhi-yu-yan-DCL%20.html</guid><pubDate>Sun, 14 Apr 2024 19:49:30 +0000</pubDate></item><item><title>MySQL-数据查询语言DQL(重点)</title><link>https://whitemousetl.github.io//post/MySQL--shu-ju-cha-xun-yu-yan-DQL%28-zhong-dian-%29.html</link><description>**DQL （Data Query Language）&#13;
数据查询语言：用来对数据库表进行查询**&#13;
&#13;
1、DQL-语法&#13;
&#13;
```&#13;
select &#13;
           字段列表&#13;
from &#13;
            表名列表&#13;
where&#13;
            条件列表&#13;
group by&#13;
            分组字段列表&#13;
having&#13;
            分组后条件列表&#13;
order by&#13;
            排序字段列表&#13;
limit&#13;
            分页参数&#13;
```&#13;
&#13;
2、DQL-基本查询&#13;
- 查询多个字段&#13;
`select 字段1，字段2，字段3，... from 表名；`&#13;
- 查询全部字段&#13;
`select * from 表名；`&#13;
- 设置别名&#13;
`select 字段1 [as 别名1] ，字段2 [as 别名2] ... from 表名；`&#13;
- 去掉重复记录&#13;
`select distinct 字段列表 from 表名`&#13;
&#13;
3、DQL-条件查询&#13;
```&#13;
比较运算符&#13;
&gt; 大于&#13;
&gt;= 大于等于&#13;
&lt; 小于&#13;
&lt;= 小于等于&#13;
= 等于&#13;
&lt;&gt; 或 != 不等于&#13;
between ... and ... 在某个范围之内（含最小最大值）&#13;
in (...) 在in之后的列表中的值多选一&#13;
like 占位符 模糊匹配( _ 匹配单个字符，%匹配任意个字符)&#13;
is null 是null&#13;
```&#13;
```&#13;
逻辑运算符&#13;
and 或 &amp;&amp;         并且（多个条件同时成立）&#13;
or 或 ||                或者（多个条件任意一个成立）&#13;
not 或 !               非，不是&#13;
```&#13;
&#13;
4、DQL-集合函数&#13;
聚合函数是将一列数据作为一个整体，进行纵向计算&#13;
注意：所有的null都不参与聚合函数运算&#13;
```&#13;
常见的聚合函数&#13;
count          统计数量&#13;
max             最大值&#13;
min              最小值&#13;
avg              平均值&#13;
sum             总和&#13;
```&#13;
`语法：select 聚合函数（字段列表） from 表名；`&#13;
&#13;
5、DQL-分组查询&#13;
分组函数一般配合聚合函数使用&#13;
&#13;
`select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件]`&#13;
&#13;
where 和 having 的区别&#13;
- 执行时机不同，where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤&#13;
- 判断条件不同，where不能对聚合函数进行判断，而having可以&#13;
&#13;
注意：&#13;
- 执行顺序：where &gt; 聚合函数 &gt; having&#13;
- 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义&#13;
&#13;
6、DQL-排序查询&#13;
`语法：select 字段列表 from 表名 order by 字段1 排序方式1，字段2 排序方式2；`&#13;
排序方式：&#13;
ASC ：升序（默认值）&#13;
DESC： 降序&#13;
如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序&#13;
&#13;
DQL-分页查询&#13;
`语法：select 字段列表 from 表名 limit 起始索引，查询记录数；`&#13;
注意：&#13;
1、起始索引从0开始，起始索引=（查询页码-1）*每页显示记录数&#13;
2、分页查询是数据库的方言，不同数据库有不同实现，MySQL中是limit&#13;
3、如果查询的是第一页的数据，起始索引可以省略，如：limit 10 是第一页的10条记录&#13;
&#13;
DQL-执行顺序&#13;
语法顺序：&#13;
```&#13;
select &#13;
           字段列表&#13;
from &#13;
            表名列表&#13;
where&#13;
            条件列表&#13;
group by&#13;
            分组字段列表&#13;
having&#13;
            分组后条件列表&#13;
order by&#13;
            排序字段列表&#13;
limit&#13;
            分页参数&#13;
```&#13;
`执行顺序：from &gt; where &gt; group by &gt; select &gt; order by &gt; limit `&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/MySQL--shu-ju-cha-xun-yu-yan-DQL%28-zhong-dian-%29.html</guid><pubDate>Sun, 14 Apr 2024 19:46:02 +0000</pubDate></item><item><title>MySQL-数据操作语言DML </title><link>https://whitemousetl.github.io//post/MySQL--shu-ju-cao-zuo-yu-yan-DML%20.html</link><description>**DML （Data Manipulation Language）&#13;
数据操作语言：用来对数据库表记录进行增删改**&#13;
&#13;
添加数据：insert&#13;
&#13;
- 给指定字段添加数据：&#13;
  insert into 表名(字段1,字段2,字段3,...) values(值1,值2,值3,...);&#13;
&#13;
- 给全部字段增加：&#13;
 insert into 表名 values(值1,值2,值3,...);&#13;
&#13;
- 批量添加数据：&#13;
insert into 表名(字段1,字段2,字段3,...),(值1,值2,值3,...);&#13;
insert into 表名 values(值1,值2,值3,...),(值1,值2,值3,...);&#13;
&#13;
修改数据：update&#13;
update 表名 set 字段名1=值1,字段名2=值2, ... [where 条件]&#13;
条件如果没有的话就是修改整张表的该字段的数据&#13;
&#13;
删除数据：delete&#13;
delete form 表名 [where 条件]&#13;
注意：&#13;
1、delete语句条件可以有，也可以没有，没有会删除该表所有数据&#13;
2、delete语句不能删除某一个字段的值，可以使用update把该字段赋值为null。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/MySQL--shu-ju-cao-zuo-yu-yan-DML%20.html</guid><pubDate>Sun, 14 Apr 2024 19:34:04 +0000</pubDate></item><item><title>MySQL-数据定义语言DDL</title><link>https://whitemousetl.github.io//post/MySQL--shu-ju-ding-yi-yu-yan-DDL.html</link><description>**DDL（Data Definition Language）&#13;
数据定义语言：用来定义数据库对象（数据库、表、字段、索引）**&#13;
&#13;
1、数据库操作&#13;
查询所有数据库：show databases;&#13;
查询当前数据库：select database();&#13;
&#13;
&#13;
&#13;
创建数据库&#13;
create database [if not exists] 数据库名 [default charset 字符集] [collate 排序规则]；&#13;
&#13;
&#13;
删除数据库&#13;
drop database [if exists] 数据库名；&#13;
&#13;
&#13;
使用数据库&#13;
use 数据库名；&#13;
&#13;
2、表操作&#13;
- 查询&#13;
- 查询当前数据库所有表：show tables;&#13;
- 查询表结构：desc 表名;&#13;
- 查询指定表的建表语句：show create table 表名;&#13;
- `create table 表名（`&#13;
        `字段1 字段1类型 [comment 字段1注释 ],`&#13;
        `字段2 字段2类型 [comment 字段2注释 ],`&#13;
        `字段3 字段3类型 [comment 字段3注释 ],`&#13;
        `字段4 字段4类型 [comment 字段4注释 ],`&#13;
        `字段5 字段5类型 [comment 字段5注释 ],`&#13;
        `...`&#13;
        `字段n 字段n类型 [comment 字段n注释]`&#13;
`）[comment 表注释];`&#13;
&#13;
3、修改&#13;
- 添加字段：alter table 表名 add 字段名 类型（长度) [comment 注释] [约束];&#13;
- 修改数据类型：alter table 表名 modify 字段名 新数据类型(长度);&#13;
- 修改字段名和字段类型 alter table 表名 change 旧字段名 新字段名 新数据类型(长度) [comment 注释] [约束];&#13;
- 删除字段：alter table 表名 drop 字段名;&#13;
- 修改表名：alter table 表名 rename to 新表名;&#13;
&#13;
4、删除&#13;
&#13;
- 删除表：drop table [if exists] 表名；&#13;
- 删除指定表，并重新创建该表，主键也重新开始：truncate table 表名;                。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/MySQL--shu-ju-ding-yi-yu-yan-DDL.html</guid><pubDate>Sun, 14 Apr 2024 19:31:31 +0000</pubDate></item><item><title>WPF-把背景颜色设置为渐变色</title><link>https://whitemousetl.github.io//post/WPF--ba-bei-jing-yan-se-she-zhi-wei-jian-bian-se.html</link><description>把背景色设置为渐变色的效果有两种。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/WPF--ba-bei-jing-yan-se-she-zhi-wei-jian-bian-se.html</guid><pubDate>Sun, 14 Apr 2024 16:59:52 +0000</pubDate></item><item><title>Linux-上传到Linux、下载到Windows（rz、sz）和压缩解压缩</title><link>https://whitemousetl.github.io//post/Linux--shang-chuan-dao-Linux%E3%80%81-xia-zai-dao-Windows%EF%BC%88rz%E3%80%81sz%EF%BC%89-he-ya-suo-jie-ya-suo.html</link><description>除了通过FinalShell的图形化进行上传下载外，还可以通过rz、sz命令进行文件传输&#13;
rz、sa命令需要安装：yum -y install lrzsz&#13;
&#13;
&#13;
rz命令，上传，语法直接输入rz（rz命令上传很慢，一般用拖拽的方式上传）&#13;
&#13;
sz命令，下载，语法：sz 要下载的文件&#13;
&#13;
压缩、解压（tar、zip、unzip）&#13;
&#13;
.tar，称为tarball，归档文件，即简单地将文件组装到一个.tar文件中内，并没有太多文件体积的减少，仅仅是简单的封装&#13;
&#13;
.gz，也常见为tar.gz，gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大地减少压缩后的体积&#13;
&#13;
语法：tar [-c -v -x -f -z -C] 参数1 参数2 ... 参数N&#13;
-c，创建压缩文件，用于压缩模式&#13;
-v，显示压缩、解压过程，用于查看进度&#13;
-x，解压模式&#13;
-f，要创建的文件，或要解压的文件，-f选项必须在所有选项位置中处于最后一个&#13;
-z，gzip模式，不适用-z就是普通的tarball模式&#13;
-C，选择解压的目的地，用于解压模式&#13;
&#13;
tra两种格式均可使用&#13;
-z使用一般在第一位，-f使用必须在最后一位&#13;
&#13;
tar压缩常用的组合有：&#13;
&#13;
tar -cvf test.tar 1.txt 2.txt 3.txt&#13;
将1.txt、2.txt、3.txt压缩到test.tar文件内&#13;
&#13;
tar -zcvf test.tar.gz 1.txt 2.txt 3.txt &#13;
将1.txt、2.txt、3.txt压缩到test.tar.gz文件内，使用gzip模式&#13;
&#13;
tar解压常用的组合有：&#13;
&#13;
tar -xvf test.tar&#13;
解压test.tar文件，解压后的文件放到当前目录&#13;
&#13;
tar -xvf test.tar -C /home/whitemousetl&#13;
解压test.tar，解压后的文件放到指定目录（/home/whitemousetl）&#13;
&#13;
tar -zxvf test.tar.gz -C /home/whitemousetl&#13;
以gzip模式解压test.tar.gz，解压后的文件放在指定目录（/home/whitemousetl）。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--shang-chuan-dao-Linux%E3%80%81-xia-zai-dao-Windows%EF%BC%88rz%E3%80%81sz%EF%BC%89-he-ya-suo-jie-ya-suo.html</guid><pubDate>Sun, 14 Apr 2024 16:48:39 +0000</pubDate></item><item><title>Linux-环境变量env</title><link>https://whitemousetl.github.io//post/Linux--huan-jing-bian-liang-env.html</link><description>为何无论当前工作目录在哪里，都能执行/usr/bin/cd这个程序呢？&#13;
因为环境变量的作用。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--huan-jing-bian-liang-env.html</guid><pubDate>Sun, 14 Apr 2024 16:47:06 +0000</pubDate></item><item><title>Linux-主机运行状态top、df、iostat、sar</title><link>https://whitemousetl.github.io//post/Linux--zhu-ji-yun-xing-zhuang-tai-top%E3%80%81df%E3%80%81iostat%E3%80%81sar.html</link><description>可以通过top命令查看CPU、内存的运行情况，类似windows系统的任务管理器&#13;
默认每5秒运行一次，语法：直接输入top即可，按q或者ctrl + c 退出&#13;
&#13;
![image](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/005339ad-481d-43d6-ac1c-19342f7e24e6)&#13;
![image](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/42d5f283-a8b9-4fe8-8e85-1bba6dfbdfd1)&#13;
![image](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/cbcff1c3-5efe-40d6-b1b8-3c7a89212502)&#13;
![image](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/6e53666f-82ec-41fd-a5f4-574dcd232bc4)&#13;
&#13;
**使用df命令，可以查看磁盘的使用情况**&#13;
语法：df [-h]&#13;
选项[-h],以更加人性化的单位显示&#13;
&#13;
可以使用iostat查看CPU、磁盘的相关信息&#13;
语法：**iostat [-x] [num1] [num2]**&#13;
选项[-x],显示更多信息&#13;
num1数字，刷新间隔，num2数字，刷新几次&#13;
![image](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/1c5999e1-3294-4b94-858c-d9dca4e369d2)&#13;
&#13;
可以使用sar命令查看网络的相关统计（sar命令非常复杂，这里仅用于统计网络）&#13;
语法：**sar -n DEV num1 num2**&#13;
选项 -n ，查看网络&#13;
DEV表示查看网络接口&#13;
num1，刷新间隔&#13;
num2，刷新次数&#13;
![image](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/e60d4e66-799f-4a51-bc3f-c1db9aa96b79)&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--zhu-ji-yun-xing-zhuang-tai-top%E3%80%81df%E3%80%81iostat%E3%80%81sar.html</guid><pubDate>Sun, 14 Apr 2024 16:45:34 +0000</pubDate></item><item><title>Linux-进程管理ps -ef</title><link>https://whitemousetl.github.io//post/Linux--jin-cheng-guan-li-ps%20-ef.html</link><description>程序运行在操作系统中，是被操作系统所管理的&#13;
为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个进程，并为每一个进程都分配一个独有的：进程ID（进程号）&#13;
&#13;
可以通过ps命令查看Linux系统中的进程信息&#13;
语法：**ps [-e -f]**&#13;
选项[-e] 显示出所有的进程信息&#13;
选项[-f] 以完全格式化的的形式展示信息（展示全部信息）&#13;
一般来说，固定用法就是 ps -ef 列出全部进程的全部信息&#13;
&#13;
![image](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/03344219-c258-4e47-a396-51b0499ad632)&#13;
&#13;
关闭进程，可以使用kill命令&#13;
语法：kill [-9] 进程ID&#13;
选项[-9] 表示强制关闭进程。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--jin-cheng-guan-li-ps%20-ef.html</guid><pubDate>Sun, 14 Apr 2024 16:43:36 +0000</pubDate></item><item><title>Linux-网络传输（下载和网络请求、端口）ping、wget、curl</title><link>https://whitemousetl.github.io//post/Linux--wang-luo-chuan-shu-%EF%BC%88-xia-zai-he-wang-luo-qing-qiu-%E3%80%81-duan-kou-%EF%BC%89ping%E3%80%81wget%E3%80%81curl.html</link><description>通过ping命令，检查指定的网络服务器是否可以联通状态&#13;
语法：**ping [-c num] ip或主机名**&#13;
选项[-c num] 检查次数，不使用[-c num] 选项，将无限次数持续检查&#13;
参数ip或主机名，被检查的服务器的ip地址或主机名地址&#13;
如：ping -c 3 baidu.com&#13;
&#13;
wget是非交互式的文件下载器，可以在命令行内下载网络文件&#13;
语法：**wget [-b] url**&#13;
选项[-b] ，后台下载，会将日志写入到当前工作目录的wget-log文件中&#13;
参数url，下载链接&#13;
&#13;
curl可以发送http请求，可用于：下载文件、获取信息等&#13;
语法：**curl [-O] url**&#13;
选项[-O] ，用于下载文件，当url是下载链接时，可以使用此选项保存文件&#13;
参数url，要发起请求的网络地址&#13;
curl cip.cc 获取主机的公网ip地址&#13;
curl whitemousetl.github.io 获取该网页的HTML代码&#13;
&#13;
端口是设备与外界通讯交流的出入口。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--wang-luo-chuan-shu-%EF%BC%88-xia-zai-he-wang-luo-qing-qiu-%E3%80%81-duan-kou-%EF%BC%89ping%E3%80%81wget%E3%80%81curl.html</guid><pubDate>Sun, 14 Apr 2024 16:42:31 +0000</pubDate></item><item><title>Linux-IP地址、主机名和域名解析</title><link>https://whitemousetl.github.io//post/Linux-IP-di-zhi-%E3%80%81-zhu-ji-ming-he-yu-ming-jie-xi.html</link><description>每一台联网的电脑都有一个地址，用于和其他计算机进行通讯&#13;
IP地址主要有两个版本IPv4和IPv6&#13;
IPv4的地址格式是：a.b.c.d，其中abcd表示0~255的数字，如192.168.88.101就是一个标准的IPv4地址&#13;
Linux系统可以通过命令ifconfig查看本机IP地址，如无法使用ifconfig命令，&#13;
可以安装yum -y install net-tools&#13;
&#13;
127.0.0.1,用于指代本机&#13;
0.0.0.0，有三种用法，分别是：&#13;
可以用于指代本机&#13;
可以在端口绑定中用来确定绑定关系(后续讲解)&#13;
在一些IP地址限制中,表示所有IP的意思,如放行规则设置为0.0.0.0,表示允许任意IP访问&#13;
&#13;
每一台电脑除了对外联络的地址（IP地址）以外，也可以有也给名字，称之为主机名&#13;
无论是Windows还是Linux系统都可设置&#13;
&#13;
查看Linux系统主机名的命令：hostname&#13;
修改主机名：hostnamectl set-hostname 主机名 ，修改后的主机名（需root）&#13;
&#13;
域名解析：IP地址不好记住，然后做一个映射（域名解析）把IP地址与网站名做对应，然后记住网站名就可以访问该网站了&#13;
&#13;
![image](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/88be0dfe-3322-41b5-96a7-ed61fc54b043)&#13;
&#13;
先查看本机的记录(私人地址本)&#13;
Windows看:C:\Windows\System32\drivers\etc\hosts&#13;
Linux看:/etc/hosts&#13;
再联网去DNS服务器（如114.114.114.114，8.8.8.8等）询问&#13;
可以再windows系统中的私人地址本配置Linux的域名解析（地址映射），从而使得FinalShell链接Linux系统时不需要IP地址，使用主机名即可。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-IP-di-zhi-%E3%80%81-zhu-ji-ming-he-yu-ming-jie-xi.html</guid><pubDate>Sun, 14 Apr 2024 16:39:58 +0000</pubDate></item><item><title>Linux-date命令以及校准时间ntp</title><link>https://whitemousetl.github.io//post/Linux-date-ming-ling-yi-ji-xiao-zhun-shi-jian-ntp.html</link><description>通过date命令可以在命令行中查看系统的时间&#13;
语法：**date [-d] [+格式化字符串]**&#13;
[-d] 按照给定的字符串显示日期，一般用于日期计算&#13;
格式化字符串：通过特定的字符串标记，来控制显示时间的格式&#13;
date默认不带参数是输出当前时间&#13;
[-d] 选项，可以按照给定的字符串显示日期，一般用于日期计算&#13;
date -d "+1 day"  +"%Y-%m-%d"&#13;
&#13;
`%Y 年&#13;
%y 年份后两位数组（00~99）&#13;
%m月份（01~12）&#13;
%d日（01~31）&#13;
%H小时（00~23）&#13;
%M分钟（00~59）&#13;
%S秒（00~60）`&#13;
%s自1970-01-01 00：00：00 UTC到现在的秒数&#13;
&#13;
Lunux系统默认时区并非东8区&#13;
&#13;
UTC 代表协调世界时。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-date-ming-ling-yi-ji-xiao-zhun-shi-jian-ntp.html</guid><pubDate>Sun, 14 Apr 2024 16:37:59 +0000</pubDate></item><item><title>Linux-软链接ln，相当于windows系统的快捷方式</title><link>https://whitemousetl.github.io//post/Linux--ruan-lian-jie-ln%EF%BC%8C-xiang-dang-yu-windows-xi-tong-de-kuai-jie-fang-shi.html</link><description>语法：**ln -s 参数1 参数2**&#13;
-s选项，创建软连接&#13;
参数1 ，被链接的文件或文件夹&#13;
参数2，要链接去的目的地&#13;
ln -s /etc/yum.conf ~/yum&#13;
ln -s /etc/yum ~/yum。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--ruan-lian-jie-ln%EF%BC%8C-xiang-dang-yu-windows-xi-tong-de-kuai-jie-fang-shi.html</guid><pubDate>Sun, 14 Apr 2024 16:35:58 +0000</pubDate></item><item><title>Linux-systemct命令控制软件的启动、停止和自动开启</title><link>https://whitemousetl.github.io//post/Linux-systemct-ming-ling-kong-zhi-ruan-jian-de-qi-dong-%E3%80%81-ting-zhi-he-zi-dong-kai-qi.html</link><description>能够被systemctl管理的软件一般成为服务&#13;
语法：**systemctl start | stop | enable | disable | status服务名**&#13;
启动、停止、开机自启，开机不自启、查看服务状态&#13;
需要root权限&#13;
系统内置的服务比较多，比如：&#13;
NetworkManager，主网络服务&#13;
network，副网络服务&#13;
firewalld，防火墙服务&#13;
sshd，ssh服务（FinalShell远程登录Linux就是使用这个服务）&#13;
&#13;
apache服务软件是：httpd&#13;
&#13;
部分软件安装后没有自动集成到systemctl中，我们可以手动添加。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-systemct-ming-ling-kong-zhi-ruan-jian-de-qi-dong-%E3%80%81-ting-zhi-he-zi-dong-kai-qi.html</guid><pubDate>Sun, 14 Apr 2024 16:35:18 +0000</pubDate></item><item><title>Linux-下载命令</title><link>https://whitemousetl.github.io//post/Linux--xia-zai-ming-ling.html</link><description>centOS系统使用yum命令&#13;
语法：**yum [-y] [install remove search] 软件名称**&#13;
选项[-y] 自动确认，无需手动确认安装或卸载过程&#13;
install：安装&#13;
remove：卸载&#13;
search：搜索&#13;
yum需要root权限或使用sudo &#13;
yum需要联网&#13;
&#13;
ubuntu系统使用apt命令，其他与centOS系统基本一样&#13;
&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--xia-zai-ming-ling.html</guid><pubDate>Sun, 14 Apr 2024 16:34:34 +0000</pubDate></item><item><title>Linux-修改权限控制chmod、修改所属用户、用户组chown</title><link>https://whitemousetl.github.io//post/Linux--xiu-gai-quan-xian-kong-zhi-chmod%E3%80%81-xiu-gai-suo-shu-yong-hu-%E3%80%81-yong-hu-zu-chown.html</link><description>可以使用chmod命令，修改文件、文件夹的权限信息&#13;
注意：只有文件、文件夹的所属用户或root用户可以修改&#13;
语法：**chmod [-R] 权限 文件或文件夹**&#13;
选项 [-R] ，对文件夹内的全部内容应用同样的操作&#13;
chmod u=rwx,g=rx,o=x hello.txt &#13;
chmod -R u=rwx，g=rx，o=x test&#13;
&#13;
u=rwx,g=rx,o=x 这部分可以用751代替&#13;
也就是chmod 751 hello.txt&#13;
---是0，rwx是7，其他可推导出来&#13;
&#13;
使用chown命令，可以修改文件、文件夹的所属用户和用户组，此命令只能root用户使用&#13;
语法：**chown [-R] [用户] [ : ] [用户组] 文件或文件夹**&#13;
选项[-R] ,同chmod，对文件夹内全部内容应用相同规则&#13;
选项用户 ，修改所属用户&#13;
选项用户组，修改所属用户组&#13;
选项[ : ]用于分隔用户和用户组&#13;
chown root hello.txt 将hello.txt所属用户修改为root&#13;
chown ：root hello.txt 将hello.txt 用户组修改为root&#13;
chown root：whitemousetl 将hello.txt用户改为root，用户组改为whitemousetl&#13;
chown -R root test。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--xiu-gai-quan-xian-kong-zhi-chmod%E3%80%81-xiu-gai-suo-shu-yong-hu-%E3%80%81-yong-hu-zu-chown.html</guid><pubDate>Sun, 14 Apr 2024 16:32:23 +0000</pubDate></item><item><title>Linux-查看权限控制</title><link>https://whitemousetl.github.io//post/Linux--cha-kan-quan-xian-kong-zhi.html</link><description>通过命令ls -l可以以列表形式查看内容，并显示权限细节&#13;
drwxr-xr-x. 2 whitemousetl whitemousetl  6 3月  10 08:08 Desktop&#13;
drwxr-xr-x 表示文件或文件夹的权限控制信息&#13;
第一个whitemousetl 表示文件、文件夹所属用户&#13;
第二个whitemousetl  表示文件、文件夹所属用户组&#13;
&#13;
权限控制信息总共10个槽位&#13;
![image](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/5928fbd7-4fe2-40f6-a34b-1748ce32ac03)&#13;
&#13;
r是读权限&#13;
w是写权限&#13;
x是执行权限&#13;
第1位可以是 - 或 l 或 d ，-表示文件，d表示文件夹，l表示软连接&#13;
第2、3、4位表示所属用户权限，可以是 - 或 r 或 w 或 x ，-表示无，r是读，w是写，x是执行&#13;
第5、6、7位表示所属用户组权限，其他与第2、3、4位相同&#13;
第8、9、10位表示其他用户权限，其他与第2、3、4位相同&#13;
&#13;
r对于文件是可以查看文件内容，对于文件夹是可以查看文件夹内容，比如ls命令&#13;
w对于文件是可以修改此文件内容，对于文件夹是可以在文件夹内创建、删除、改名等操作&#13;
x对于文件是可以将文件作为程序执行，对于文件夹可以更改目录到此文件夹，即cd操作。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--cha-kan-quan-xian-kong-zhi.html</guid><pubDate>Sun, 14 Apr 2024 16:31:32 +0000</pubDate></item><item><title>Linux-用户、用户组、getent</title><link>https://whitemousetl.github.io//post/Linux--yong-hu-%E3%80%81-yong-hu-zu-%E3%80%81getent.html</link><description>Linux可以配置多个用户、配置多个用户组、用户可以加入多个用户组中&#13;
&#13;
Linux系统中关于权限管控级别有2个级别，分别是：&#13;
针对用户的权限控制&#13;
针对用户组的权限控制&#13;
&#13;
以下命令需要root用户执行&#13;
**创建用户组 groupadd 用户组名**&#13;
**删除用户组 groupdel 用户组名**&#13;
&#13;
以下命令需要root用户执行&#13;
添加用户&#13;
**创建用户 useradd [-g -d] 用户名**&#13;
选项[-g] 指定用户的组，不指定[-g] ，会创建同名组并自动加入，指定[-g]需要组已经存在，如已经存在同名组，必须使用[-g]&#13;
选项[-d] [-d]指定用户Home路径，不指定，Home目录默认在/home/用户名&#13;
&#13;
以下命令需要root用户执行&#13;
删除用户&#13;
**userdel [-r] 用户名**&#13;
选项 [-r] 删除用户的Home目录，删除用户时不使用[-r]，Home目录保留&#13;
&#13;
以下命令需要root用户执行&#13;
查看用户组&#13;
**id [用户名]**&#13;
参数用户名，被查看的用户，不提供则查看自身&#13;
&#13;
以下命令需要root用户执行&#13;
修改用户所属组&#13;
**usermod -aG 用户组 用户名，指定用户加入指定用户组**&#13;
&#13;
使用getent passwd命令可以查看当前系统中有哪些用户&#13;
**语法：getent passwd**passwd是Linux密码&#13;
共有7份信息：&#13;
用户名：whitemousetl:&#13;
密码（x）：x:&#13;
用户ID：1000:&#13;
组ID：1000:&#13;
描述信息（无用）：whitemousetl:&#13;
Home目录：/home/whitemousetl:&#13;
执行终端（默认bash）/bin/bash&#13;
&#13;
使用getent group命令可以查看当前系统中有哪些用户组&#13;
**语法：getent group**&#13;
有3份信息：&#13;
组名称：test4:&#13;
组认证（显示为x）：x:&#13;
组ID 1003:&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--yong-hu-%E3%80%81-yong-hu-zu-%E3%80%81getent.html</guid><pubDate>Sun, 14 Apr 2024 16:30:12 +0000</pubDate></item><item><title>Linux-用户权限（su与sudo）</title><link>https://whitemousetl.github.io//post/Linux--yong-hu-quan-xian-%EF%BC%88su-yu-sudo%EF%BC%89.html</link><description>在Linux系统中，拥有最大权限的账户名是root（超级管理员）&#13;
&#13;
root用户拥有最大的系统操作权限，而普通用户在很多地方的权限是受限的&#13;
普通用户在Home目录内是不受限的，出了Home目录，用户仅有只读和执行权限，无修改权限&#13;
&#13;
通过su命令切换账户，来自英文switch user&#13;
&#13;
**语法：su [-] 用户名**&#13;
[-] 可选，表示是否在切换用户后加载环境变量，建议带上&#13;
参数用户名，表示要切换的用户，用户名也可以省略，省略表示切换到root&#13;
切换用户后，通过exit命令退回上一个用户，也可以使用快捷键Ctor + D&#13;
&#13;
不建议长期使用root用户，避免带来系统损坏&#13;
&#13;
可以使用sudo命令，为普通用户的命令授权，临时以root 身份执行&#13;
**语法：sudo 其他命令**&#13;
在其他命令之前，带上sudo，即可为这一条命令临时赋予root权限&#13;
但并不是所有用户都有权利使用sudo，需要为普通用户配置sudo认证&#13;
&#13;
**为普通用户配置sudo认证**&#13;
切换到root用户，执行visudo，会自动通过vi编辑器打开/etc/sudoers&#13;
在文件最后添加：用户名 ALL=（ALL）  NOPASSWORD：ALL&#13;
最后通过wq保存退出 。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--yong-hu-quan-xian-%EF%BC%88su-yu-sudo%EF%BC%89.html</guid><pubDate>Sun, 14 Apr 2024 16:25:33 +0000</pubDate></item><item><title>Linux-vi/vim编辑器</title><link>https://whitemousetl.github.io//post/Linux-vi-vim-bian-ji-qi.html</link><description>**vi/vim是visual interface 的简称，是Linux中最经典的文本编辑器**&#13;
vim是vi的加强版本，兼容vi所有指令，不经能编辑文本，而且还具有shell程序编辑的功能，有不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性&#13;
&#13;
vi/vim的三种模式&#13;
**1、命令模式（Command mode）&#13;
命令模式下，所敲的按键编辑器都理解为命令，以命令驱动执行不同的功能。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-vi-vim-bian-ji-qi.html</guid><pubDate>Sun, 14 Apr 2024 16:22:21 +0000</pubDate></item><item><title>Linux-echo、tail、反引号 ` 和重定向符</title><link>https://whitemousetl.github.io//post/Linux-echo%E3%80%81tail%E3%80%81-fan-yin-hao-%20%60%20-he-zhong-ding-xiang-fu.html</link><description>echo命令可以在命令行输出指定内容&#13;
语法：**echo 输出内容**&#13;
无需选项，只有一个参数，表示要输出的内容，内容用""包围起来&#13;
&#13;
![echo](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/3c1cb60e-6f1d-4fa4-8fcf-93f79e5cd9a8)&#13;
&#13;
**反引号（飘号）`**&#13;
被 ` 包围的内容，会被作为命令执行，而非普通字符&#13;
&#13;
**重定向符 &gt; 和 &gt;&gt;**&#13;
&gt; ，将左侧命令的输出结果，覆盖写入到符号右侧指定的文件中&#13;
&gt;&gt; ，将左侧命令的输出结果，追加写入到符号右侧指定的文件中&#13;
![追加覆盖](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/54724248-e25e-49cf-893a-9767d25c27e4)&#13;
&#13;
tail命令，可以查看文件尾部内容，跟踪文件的最新更改&#13;
**语法：tail [-f -num] Linux路径**&#13;
参数 Linux路径，表示被跟踪的文件路径&#13;
选项[-f] 表示持续跟踪&#13;
选项[-num] 表示查看尾部多少行，不填默认10行&#13;
[-f] 持续追踪表示当尾部更新时，命令行会实时跟新&#13;
![tail](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/5a0a41b7-b4cc-4cae-afd7-8db739ab6d28)&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-echo%E3%80%81tail%E3%80%81-fan-yin-hao-%20%60%20-he-zhong-ding-xiang-fu.html</guid><pubDate>Sun, 14 Apr 2024 16:18:18 +0000</pubDate></item><item><title>Linux-grep、wc、|（过滤、统计行数单词量、管道符）</title><link>https://whitemousetl.github.io//post/Linux-grep%E3%80%81wc%E3%80%81-%EF%BC%88-guo-lv-%E3%80%81-tong-ji-xing-shu-dan-ci-liang-%E3%80%81-guan-dao-fu-%EF%BC%89.html</link><description>通过grep命令，从文件中根据关键字过滤文件行&#13;
&#13;
**语法：grep [-n] 关键字 文件路径**&#13;
&#13;
[-n] 可选，表示在选项中显示匹配的行的行号&#13;
**参数关键字 必填**，表示过滤的关键字，带有空格或其他特殊符号的关键字，建议用""将其包围起来&#13;
**参数文件路径 必填**，表示要过滤内容的文件路径，可作为内容输出端口&#13;
&#13;
![grep](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/4fab4f06-078c-4772-8fe2-1ee2d29e8fca)&#13;
&#13;
通过wc命令统计文件的行数、单词量等&#13;
**语法：wc [-c -m -l -w] 文件路径**&#13;
选项 [-c] ，统计byte的数量&#13;
选项[-m] ，统计字符数量&#13;
选项[-l] ，统计行数&#13;
选项[-w] ，统计单词量&#13;
参数文件路径，被统计的文件，可作为内容输入端口&#13;
&#13;
![wc](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/93194f23-2a90-4f8e-9583-0e8e97e74e16)&#13;
&#13;
管道符 | 将管道符左边命令输出的结果，作为右边命令的输入，是对输出结果的过滤&#13;
如：cat test.txt | grep "哈"&#13;
管道符可以嵌套使用，只要有输出结果，就可使用管道符&#13;
![管道符](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/f3217e9c-a909-4a1b-9afb-2f4891306aa6)&#13;
&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-grep%E3%80%81wc%E3%80%81-%EF%BC%88-guo-lv-%E3%80%81-tong-ji-xing-shu-dan-ci-liang-%E3%80%81-guan-dao-fu-%EF%BC%89.html</guid><pubDate>Sun, 14 Apr 2024 16:06:01 +0000</pubDate></item><item><title>Linux-which、find命令（查找命令所在的目录、按条件查找文件/文件夹[find命令查找的内容最好用”“包围]）</title><link>https://whitemousetl.github.io//post/Linux-which%E3%80%81find-ming-ling-%EF%BC%88-cha-zhao-ming-ling-suo-zai-de-mu-lu-%E3%80%81-an-tiao-jian-cha-zhao-wen-jian---wen-jian-jia-%5Bfind-ming-ling-cha-zhao-de-nei-rong-zui-hao-yong-%E2%80%9D%E2%80%9C-bao-wei-%5D%EF%BC%89.html</link><description>**which 要查找的命令**&#13;
&#13;
- **whicht 命令本身必填**&#13;
- **要查找的命令 参数 必填**&#13;
&#13;
![which](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/0505bdb4-d834-48db-b88a-941ad20f817e)&#13;
&#13;
**find命令用来搜索指定文件**&#13;
1、**按文件吗搜索**&#13;
语法：**find 起始路径 -name "被检查的文件名"**&#13;
可以使用通配符 * ，使用通配符时会把文件和文件夹都搜索出来&#13;
&#13;
![find](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/7b9bfbdf-b0df-4e49-825a-b504098937d9)&#13;
&#13;
**按照文件大小搜索**&#13;
语法：**find 起始路径 -size + | -n [kMG]**&#13;
+、- 表示大于和小于&#13;
kMG表示大小单位，k（小写字母）表示kb，M表示Mb，G表示Gb&#13;
如：find / -size -10k&#13;
        find / -size +100M&#13;
        find / -size +1G&#13;
&#13;
![find1](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/88985daf-4a5b-4420-8461-61981efcf4a0)&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-which%E3%80%81find-ming-ling-%EF%BC%88-cha-zhao-ming-ling-suo-zai-de-mu-lu-%E3%80%81-an-tiao-jian-cha-zhao-wen-jian---wen-jian-jia-%5Bfind-ming-ling-cha-zhao-de-nei-rong-zui-hao-yong-%E2%80%9D%E2%80%9C-bao-wei-%5D%EF%BC%89.html</guid><pubDate>Sun, 14 Apr 2024 13:12:25 +0000</pubDate></item><item><title>Linux-cp、mv、rm（复制命令、移动命令、删除命令）</title><link>https://whitemousetl.github.io//post/Linux-cp%E3%80%81mv%E3%80%81rm%EF%BC%88-fu-zhi-ming-ling-%E3%80%81-yi-dong-ming-ling-%E3%80%81-shan-chu-ming-ling-%EF%BC%89.html</link><description>cp命令可以用来复制文件/文件夹，来自copy&#13;
&#13;
**cp [-r] 文件/文件夹 文件夹**&#13;
&#13;
- cp **命令本身，必填**，表示复制&#13;
- [-r] **可选项，非必填**，用于复制目录及其所有的子目录和文件，如果要复制目录，需要使用该选项。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-cp%E3%80%81mv%E3%80%81rm%EF%BC%88-fu-zhi-ming-ling-%E3%80%81-yi-dong-ming-ling-%E3%80%81-shan-chu-ming-ling-%EF%BC%89.html</guid><pubDate>Sun, 14 Apr 2024 12:51:33 +0000</pubDate></item><item><title>Linux-touch、cat、more（创建文件、查看文件内容、分页查看文件内容）</title><link>https://whitemousetl.github.io//post/Linux-touch%E3%80%81cat%E3%80%81more%EF%BC%88-chuang-jian-wen-jian-%E3%80%81-cha-kan-wen-jian-nei-rong-%E3%80%81-fen-ye-cha-kan-wen-jian-nei-rong-%EF%BC%89.html</link><description>**touch Linux文件**&#13;
&#13;
- touch **命令本身，必填**&#13;
- Linux文件 **参数，必填**，表示在当前目录下创建文件&#13;
&#13;
![touch](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/359cd580-0a62-4aeb-a89c-4f0b2dd24704)&#13;
&#13;
**cat Linux文件**&#13;
&#13;
cat **命令本身，必填**&#13;
Linux文件 **参数，必填**，表示在当前目录下查看文件&#13;
&#13;
![cat](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/0a5775ff-77ec-4e01-855c-cc628ae868d3)&#13;
&#13;
cat命令是查看文件所有内容，有时候文件内容太多，可以使用more命令来一页一页地查看&#13;
&#13;
**more Linux文件**&#13;
&#13;
- more **命令本身，必填**&#13;
- Linux文件 **参数，必填**，表示在当前目录下分页查看文件&#13;
&#13;
![more1](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/af4204c6-c836-45a3-adf9-19f8f5f3aab5)&#13;
![more2](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/c013114c-09ba-4446-a061-e15a3c4e846c)&#13;
&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-touch%E3%80%81cat%E3%80%81more%EF%BC%88-chuang-jian-wen-jian-%E3%80%81-cha-kan-wen-jian-nei-rong-%E3%80%81-fen-ye-cha-kan-wen-jian-nei-rong-%EF%BC%89.html</guid><pubDate>Sun, 14 Apr 2024 12:21:16 +0000</pubDate></item><item><title>Linux-mkdir创建新目录（文件夹）</title><link>https://whitemousetl.github.io//post/Linux-mkdir-chuang-jian-xin-mu-lu-%EF%BC%88-wen-jian-jia-%EF%BC%89.html</link><description>mkdir [-p] Linux路径&#13;
mkdir来自make directory 创建目录，用来**创建新目录**&#13;
注意:创建新文件夹需要修改权限，如果还不会修改权限，那么可以在Home目录下操作，因为涉及到权限问题，Home目录外无法成功创建新目录&#13;
&#13;
- mkdir 命令本身，必填&#13;
- [-p] 可选项 ，非必填，表示自动创建不存在的父目录，适用于创建连续多层的目录&#13;
- Linux路径 参数，必填，创建目录必须要指定目录路径&#13;
![mkdir](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/4f666872-9eae-4662-9423-7e503ff475aa)&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-mkdir-chuang-jian-xin-mu-lu-%EF%BC%88-wen-jian-jia-%EF%BC%89.html</guid><pubDate>Sun, 14 Apr 2024 11:56:18 +0000</pubDate></item><item><title>Linux-绝对路径、相对路径、特殊路径符</title><link>https://whitemousetl.github.io//post/Linux--jue-dui-lu-jing-%E3%80%81-xiang-dui-lu-jing-%E3%80%81-te-shu-lu-jing-fu.html</link><description>绝对路径：以根目录为起点，描述路径的一种写法，路径描述以/开头&#13;
相对路径：以当前目录为起点，描述路径的一种写法，路径描述无需以/开头&#13;
![绝对相对路径](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/ac4c40e6-3c22-42ab-a5e7-b5078576cd63)&#13;
特殊路径符号&#13;
. 表示当前目录，比如cd ./Desktop表示切换到当前目录下的Desktop目录内，和cd Desktop效果一致&#13;
![特殊路径符1](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/6dcfe28a-eedf-47d4-937c-e7b0b2991c4f)&#13;
&#13;
.. 表示上一级目录，比如cd ../ 即可切换到上一级目录，cd ../../ 表示切换到上二级目录&#13;
![特殊路径符2](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/536b937c-37dd-4d05-a700-892ae30fbc34)&#13;
&#13;
~ 表示Home目录，比如cd ~ 即可切换到Home目录，cd ~/Desktop 表示切换到Home内的Desktop目录&#13;
![特殊路径符3](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/96f3758a-4952-4fe8-bf48-631420699c21)&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--jue-dui-lu-jing-%E3%80%81-xiang-dui-lu-jing-%E3%80%81-te-shu-lu-jing-fu.html</guid><pubDate>Sun, 14 Apr 2024 11:44:41 +0000</pubDate></item><item><title>Linux-cd命令和pwd命令</title><link>https://whitemousetl.github.io//post/Linux-cd-ming-ling-he-pwd-ming-ling.html</link><description>cd命令来自Change Directory，改变目录&#13;
&#13;
- cd命令无需可选项，只有参数，表示要切换到哪个目录下&#13;
- cd命令直接执行，不写参数，表示回到用户的Home目录&#13;
&#13;
![cd](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/0830dbb8-da50-49d6-b503-18a5d0c616ee)&#13;
&#13;
pwd命令，来自print work directory，输出当前工作目录&#13;
pwd命令无参数，无可选项，直接输入pwd即可&#13;
![pwd](https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/83e17b90-1a5f-411b-b9a8-2c93e342ada3)&#13;
&#13;
。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux-cd-ming-ling-he-pwd-ming-ling.html</guid><pubDate>Sun, 14 Apr 2024 07:21:59 +0000</pubDate></item><item><title>Linux-目录结构和命令格式</title><link>https://whitemousetl.github.io//post/Linux--mu-lu-jie-gou-he-ming-ling-ge-shi.html</link><description>## **Linux目录结构**&#13;
Windows系统的目录结构可以有多个**盘符**，如C盘、D盘、E盘等。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/Linux--mu-lu-jie-gou-he-ming-ling-ge-shi.html</guid><pubDate>Sun, 14 Apr 2024 07:06:01 +0000</pubDate></item><item><title>WPF-样式的基本使用</title><link>https://whitemousetl.github.io//post/WPF--yang-shi-de-ji-ben-shi-yong.html</link><description>在 WPF (Windows Presentation Foundation) 中，控件属性是定义用户界面元素的各个方面的属性，例如其外观、行为或内容。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/WPF--yang-shi-de-ji-ben-shi-yong.html</guid><pubDate>Sun, 31 Mar 2024 11:15:24 +0000</pubDate></item><item><title>WPF-隐藏头部</title><link>https://whitemousetl.github.io//post/WPF--yin-cang-tou-bu.html</link><description>WPF可以把默认自带的头部给隐藏掉，不隐藏的时候是这样的&#13;
&lt;img src="https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/de4eafac-62a7-45b2-8cf3-6a791c7fb329" alt="wpf自带头部" width="200"&gt;&#13;
&#13;
隐藏使用代码：&#13;
```&#13;
&lt;WindowChrome.WindowChrome&gt;&#13;
    &lt;WindowChrome GlassFrameThickness="0"/&gt;&#13;
&lt;/WindowChrome.WindowChrome&gt;&#13;
```&#13;
&lt;img src="https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/b6ca1027-06bf-49db-9c24-e0a016b2c57a" alt="隐藏头部的代码" width="400" &gt;&#13;
&#13;
隐藏后的效果：&#13;
&#13;
&lt;img src="https://github.com/whitemousetl/whitemousetl.github.io/assets/67313669/6f29af14-37cc-49bb-877f-488501c7fdf3" alt="wpf隐藏头部后" width="400"&gt;&#13;
&#13;
为什么要隐藏头部？&#13;
因为wpf自带的头部样式不好看，需要改动的时候不如直接把这个头部隐藏掉，就可以像写UI一样直接自定义头部。</description><guid isPermaLink="true">https://whitemousetl.github.io//post/WPF--yin-cang-tou-bu.html</guid><pubDate>Sat, 30 Mar 2024 18:13:41 +0000</pubDate></item></channel></rss>